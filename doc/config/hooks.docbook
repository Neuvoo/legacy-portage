<chapter id='config-hooks'>
	<title id="config-hooks.title">Hooks Configuration</title>
	
	<sect1 id='config-hooks-execution'>
		<title id="config-hooks-execution.title">Hooks Execution</title>
		
		<para>Hooks are only executed if <quote>hooks</quote> is set in
		FEATURES.</para>
		
		<para>
		If a hook directory exists, the bash scripts within each one
		wil either be executed before or after that particular phase, in
		alphabetical order. Each one will receive the environment of an
		ebuild, so they are capable of inherit, einfo, and other common
		commands (if you find them useful). For non-ebuild hooks, avoid
		commands that may trigger changes in the filesystem!
		</para>
		
		<para>
		Ebuild hooks are executed within ebuild.sh, so they receive the
		same sandbox limitations as ebuilds.
		</para>
		
		<para>
		A hook script is expected to understand the following usage:
		<cmdsynopsis>
			<command>/bin/bash <replaceable>...</replaceable></command><sbr/>

			<arg>--opt <replaceable>portage arguments, always translated to long form, given by user at the prompt, such as "--verbose" or "--newuse"</replaceable></arg><sbr/>

			<arg>--action <replaceable>a single action being performed by portage, such as "depclean", "sync", or an ebuild phase</replaceable></arg><sbr/>

			<arg>--target <replaceable>the thing to perform the action with or on</replaceable></arg>
		</cmdsynopsis>
		</para>
		
		<para>
		Some hook types have slightly different usage. See <quote>
		<link linkend='config-hooks-locations' endterm="config-hooks-locations.title"/></quote> for more
		information.
		</para>
		
	</sect1>
	
	<sect1 id='config-hooks-locations'>
		<title id="config-hooks-locations.title">Hooks Locations</title>		
		<para>
		The following hook directories are supported. Each directory
		corresponds to a specific type, such as <quote>ebuild</quote> or
		<quote>run</quote>. The standard hook script usage applies given
		in <link linkend='config-hooks-execution' endterm="config-hooks-execution.title"/>,
		except wherever	described differently below.
		</para>
		
		<itemizedlist>
			<listitem><para><filename>/etc/portage/hooks/pre-ebuild.d/</filename> - executed before every ebuild phase execution, within ebuild.sh itself. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
			<listitem><para><filename>/etc/portage/hooks/post-ebuild.d/</filename> - executed after every ebuild phase execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
			<listitem><para><filename>/etc/portage/hooks/pre-run.d/</filename> - executed before portage considers most things, including proper permissions and validity of parsed arguments.</para></listitem>
			<listitem><para><filename>/etc/portage/hooks/post-run.d/</filename> - executed after portage is done. It should run regardless of any errors or signals sent, but this cannot be guaranteed for certain scenarios (such as when the KILL signal is received). No information is available concerning the reason portage is exiting. This is a limitation of python itself.</para></listitem>
			<listitem><para><filename>/etc/portage/hooks/pre-sync.d/</filename> - executed before portage synchronizes the portage tree.</para></listitem>
			<listitem><para><filename>/etc/portage/hooks/post-sync.d/</filename> - executed after portage has <emphasis>successfully</emphasis> synchronized the portage tree. If you want to catch a sync failure, use post-run.</para></listitem>
		</itemizedlist>
	</sect1>
	
	<sect1 id='config-hooks-skeleton-hook'>
		<title id="config-hooks-skeleton-hook.title">Skeleton Hook</title>
		<para>
		Most hooks will parse the options at the beginning and look for
		specific things. This skeleton hook provides that functionality
		to get you started.
		</para>
		<para>
		It's highly recommended that --verbose, --debug, and --quiet be
		utilized for suppressing or adding to <quote>regular</quote>
		output. The following skeleton hook already has example code in
		place to handle these flags.
		</para>
		<programlisting>
		#!/bin/bash

		verbose_redirect="/dev/null"
		debug_redirect="/dev/null"
		while [[ "$1" != "" ]]; do
			if [[ "$1" == "--opt" ]]; then
				if [[ "$2" == "--verbose" ]]; then
					verbose_redirect="/dev/tty"
				fi
				if [[ "$2" == "--debug" ]]; then
					debug_redirect="/dev/tty"
				fi
				if [[ "$2" == "--quiet" ]]; then
					verbose_redirect="/dev/null"
					debug_redirect="/dev/null"
				fi
			elif [[ "$1" == "--action" ]]; then
				: # do nothing
			elif [[ "$1" == "--target" ]]; then
				: # do nothing
			else
				ewarn "Unknown hook option: $1 $2" &amp;> "${verbose_redirect}"
			fi
			shift 2
		done
		einfo "This is an example hook." &amp;> "${verbose_redirect}"
		einfo "This is debug output." &amp;> "${debug_redirect}"
		</programlisting>
	</sect1>
</chapter>
