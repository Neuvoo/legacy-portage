<chapter id='config-hooks'>
	<title>Hooks Configuration</title>
	<sect1 id='config-hooks-locations'>
		<title>Hooks Locations</title>
		<para>
		If a hook directory exists, the bash scripts within each one
		wil either be executed before or after that particular stage, in
		alphabetical order. Each one will receive the environment of an
		ebuild, so they are capable of inherit, einfo, and other common
		commands (if you find them useful). Avoid commands that may
		trigger changes in the filesystem!
		</para>
		
		<para>
		All hooks are not allowed to directly alter portage's execution,
		but they can accomplish certain extra tasks at various points,
		which might indrectly alter portage's execution. Since hooks
		execute in a bash environment, they are told the parent process
		ID, which can be used to kill portage if absolutely needed. This
		might be useful if a hook handled the rest of a certain job,
		such as syncing, and portage's default behavior is undesired, or
		if a hook caught potential problems with the rest of portage's
		execution.
		</para>
		
		<para>
		A hook script is expected to understand the following usage:
		<cmdsynopsis>
			<command>/bin/bash <replaceable>...</replaceable></command><sbr/>

			<arg>--opt <replaceable>portage arguments, always translated to long form, given by user at the prompt, such as "--verbose" or "--newuse"</replaceable></arg><sbr/>

			<arg>--action <replaceable>a single action being performed by portage, such as "depclean", "sync", or an ebuild phase</replaceable></arg><sbr/>

			<arg>--target <replaceable>the thing to perform the action with or on</replaceable></arg>
		</cmdsynopsis>
		</para>
		
		<para>
		The following hook directories are supported. The standard hook
		script usage applies, except wherever described differently.
		</para>
		
		<itemizedlist>
			<listitem><para><filename>/etc/portage/hooks/pre-ebuild.d/</filename> - executed before every ebuild execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
			<listitem><para><filename>/etc/portage/hooks/post-ebuild.d/</filename> - executed after every ebuild execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
			<listitem><para><filename>/etc/portage/hooks/pre-run.d/</filename> - executed before portage considers most things, including proper permissions and validity of arguments.</para></listitem>
			<listitem><para><filename>/etc/portage/hooks/post-run.d/</filename> - executed after portage is done. It should run regardless of any errors or signals sent, but this cannot be guaranteed for certain scenarios (such as when the KILL signal is received). No information is available concerning the reason portage is exiting. This is a limitation of python itself.</para></listitem>
			<listitem><para><filename>/etc/portage/hooks/pre-sync.d/</filename> - executed before portage synchronizes the portage tree.</para></listitem>
			<listitem><para><filename>/etc/portage/hooks/post-sync.d/</filename> - executed after portage has successfully synchronized the portage tree. Presently you must use a combination of pre-sync and post-run to catch sync failures if desired.</para></listitem>
		</itemizedlist>
	</sect1>
	<sect1 id='config-hooks-skeleton-hook'>
		<title>Skeleton Hook</title>
		<para>
		Most hooks will parse the options at the beginning and look for
		specific things. This skeleton hook provides that functionality
		to get you started. Replace the colons with actual code where
		desired.
		</para>
		<para>
		It's highly recommended that --verbose, --debug, and --quiet be
		utilized for suppressing or adding to "regular" output. The
		following skeleton hook already has example code in place to
		handle these flags.
		</para>
		<programlisting>
		#!/bin/bash

		verbose_redirect="/dev/null"
		debug_redirect="/dev/null"
		while [[ "$1" != "" ]]; do
			if [[ "$1" == "--opt" ]]; then
				if [[ "$2" == "--verbose" ]]; then
					verbose_redirect="/dev/tty"
				fi
				if [[ "$2" == "--debug" ]]; then
					debug_redirect="/dev/tty"
				fi
				if [[ "$2" == "--quiet" ]]; then
					verbose_redirect="/dev/null"
					debug_redirect="/dev/null"
				fi
			elif [[ "$1" == "--action" ]]; then
				:
			elif [[ "$1" == "--target" ]]; then
				:
			else
				ewarn "Unknown hook option: $1 $2" > "${verbose_redirect}" 2>&1
			fi
			shift 2
		done
		einfo "This is an example hook." > "${verbose_redirect}" 2>&1
		einfo "This is debug output." > "${debug_redirect}" 2>&1
		</programlisting>
	</sect1>
</chapter>
